import { NestFactory } from '@nestjs/core';
import { AppModule } from '../../app.module';
import { getModelToken } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { TftChampion } from '../schemas/tft-champion.schema';

class TftItemsFixer {
  constructor(private readonly tftChampionModel: Model<TftChampion>) {}

  /**
   * Mapping for Vietnamese TFT item names
   */
  private getVietnameseItemMapping(): Record<string, string> {
    return {
      // Defensive Items
      'Gargoyle Stoneplate': 'Gi√°p Th·∫°ch Qu·ª∑',
      'Sunfire Cape': '√Åo Cho√†ng L·ª≠a M·∫∑t Tr·ªùi',
      "Warmog's Armor": 'Gi√°p Warmog',
      'Dragon Claw': 'M√≥ng Vu·ªët R·ªìng',
      'Force of Nature': 'S·ª©c M·∫°nh T·ª± Nhi√™n',
      'Bramble Vest': '√Åo Gi√°p Gai',
      'Titans Resolve': '√ù Ch√≠ Titan',
      Redemption: 'C·ª©u Chu·ªôc',
      'Zeke Herald': 'L·ªánh Zeke',

      // Offensive Items
      Deathblade: 'L∆∞·ª°i T·ª≠ Th·∫ßn',
      'Giant Slayer': 'K·∫ª Di·ªát Kh·ªïng L·ªì',
      'Hextech Gunblade': 'S√∫ng Ki·∫øm Hextech',
      Bloodthirster: 'Kh√°t M√°u',
      'Infinity Edge': 'L∆∞·ª°i V√¥ C·ª±c',
      'Last Whisper': 'L·ªùi Th√¨ Th·∫ßm Cu·ªëi',
      'Lord Dominiks Regard': 'L·ªùi Ch√†o Lord Dominik',
      'Mortal Reminder': 'L·ªùi Nh·∫Øc Nh·ªü Ch·∫øt Ch√≥c',
      'Runaans Hurricane': 'C∆°n B√£o Runaan',
      'Statikk Shiv': 'L∆∞·ª°i Dao Statikk',

      // Magic Items
      'Rabadons Deathcap': 'M≈© T·ª≠ Th·∫ßn Rabadon',
      'Archangels Staff': 'G·∫≠y Thi√™n Th·∫ßn',
      Morellonomicon: 'S√°ch Ph√©p Morello',
      'Ionic Spark': 'Tia L·ª≠a Ion',
      'Jeweled Gauntlet': 'GƒÉng Tay Ng·ªçc',
      'Nashors Tooth': 'RƒÉng Nashor',
      'Spear of Shojin': 'Gi√°o Shojin',

      // Utility Items
      'Thieves Gloves': 'GƒÉng Tay Tr·ªôm',
      'Tacticians Crown': 'V∆∞∆°ng Mi·ªán Chi·∫øn Thu·∫≠t Gia',
      'Shroud of Stillness': 'T·∫•m Che Tƒ©nh L·∫∑ng',
      Zephyr: 'Gi√≥ T√¢y',
      Quicksilver: 'Th·ªßy Ng√¢n',
      'Banshees Claw': 'M√≥ng Vu·ªët Banshee',
      'Edge of Night': 'B·ªù V·ª±c ƒê√™m',
      'Hand of Justice': 'B√†n Tay C√¥ng L√Ω',
      Guardbreaker: 'Ph√° V·ªá',

      // Component Items
      'B.F. Sword': 'Ki·∫øm B.F.',
      'Recurve Bow': 'Cung Cong',
      'Needlessly Large Rod': 'G·∫≠y To V√¥ √çch',
      'Tear of the Goddess': 'N∆∞·ªõc M·∫Øt N·ªØ Th·∫ßn',
      'Chain Vest': '√Åo Gi√°p X√≠ch',
      'Negatron Cloak': '√Åo Cho√†ng Negatron',
      'Giants Belt': 'Th·∫Øt L∆∞ng Kh·ªïng L·ªì',
      Spatula: 'Th√¨a X√∫c',
      Glove: 'GƒÉng Tay',

      // Set 14 Specific Items
      'Anima Visage': 'Di·ªán M·∫°o Linh H·ªìn',
      'Adaptive Helm': 'M≈© Th√≠ch ·ª®ng',
      Crownguard: 'B·∫£o V·ªá V∆∞∆°ng Mi·ªán',
      'Spectral Gauntlet': 'GƒÉng Tay Ma Qu√°i',
      'Protectors Vow': 'L·ªùi Th·ªÅ B·∫£o V·ªá',
      'Steraks Gage': 'ƒê·ªìng H·ªì Sterak',
      'Red Buff': 'Buff ƒê·ªè',
      'Blue Buff': 'Buff Xanh',
      'Locket of the Iron Solari': 'M·ªÅ ƒêay Th√©p Solari',
      'Frozen Heart': 'Tr√°i Tim BƒÉng Gi√°',

      // Missing items from analysis
      "Archangel's Staff": 'G·∫≠y Thi√™n Th·∫ßn',
      'Flux Capacitor': 'T·ª• ƒêi·ªán Th√¥ng L∆∞·ª£ng',
      "Guinsoo's Rageblade": 'L∆∞·ª°i Cu·ªìng N·ªô Guinsoo',
      'Hyper Fangs': 'RƒÉng Nanh Si√™u T·ªëc',
      "Nashor's Tooth": 'RƒÉng Nashor',
      'Pulse Stabilizer': 'B·ªô ·ªîn ƒê·ªãnh Xung',
      "Runaan's Hurricane": 'C∆°n B√£o Runaan',
      "Sterak's Gage": 'ƒê·ªìng H·ªì Sterak',
      "Titan's Resolve": '√ù Ch√≠ Titan',
    };
  }

  /**
   * Get Vietnamese translation for item name
   */
  private getVietnameseItemName(englishItemName: string): string {
    const mapping = this.getVietnameseItemMapping();
    return mapping[englishItemName] || englishItemName;
  }

  /**
   * Fix recommendedItems and recommendedItemsData for all champions
   */
  async fixRecommendedItems() {
    console.log('üîß Fixing recommendedItems and recommendedItemsData...');

    const champions = await this.tftChampionModel.find().lean();
    let updated = 0;
    let noChangeNeeded = 0;

    for (const champion of champions) {
      try {
        const championData = champion as any;
        let needsUpdate = false;
        const updateData: any = {};

        // Fix recommendedItems - convert to multilingual format
        if (
          championData.recommendedItems &&
          Array.isArray(championData.recommendedItems)
        ) {
          const multilingualItems = championData.recommendedItems.map(
            (item: string) => ({
              en: item,
              vi: this.getVietnameseItemName(item),
            }),
          );

          updateData.recommendedItems = multilingualItems;
          needsUpdate = true;
        }

        // Fix recommendedItemsData - update Vietnamese translations
        if (
          championData.recommendedItemsData &&
          Array.isArray(championData.recommendedItemsData)
        ) {
          const updatedItemsData = championData.recommendedItemsData.map(
            (item: any) => {
              if (item.name && typeof item.name === 'object' && item.name.en) {
                // Update Vietnamese translation if it's missing or same as English
                const newViName = this.getVietnameseItemName(item.name.en);
                if (!item.name.vi || item.name.vi === item.name.en) {
                  return {
                    ...item,
                    name: {
                      en: item.name.en,
                      vi: newViName,
                    },
                  };
                }
              } else if (typeof item.name === 'string') {
                // Convert string name to multilingual format
                return {
                  ...item,
                  name: {
                    en: item.name,
                    vi: this.getVietnameseItemName(item.name),
                  },
                };
              }
              return item;
            },
          );

          updateData.recommendedItemsData = updatedItemsData;
          needsUpdate = true;
        }

        if (needsUpdate) {
          await this.tftChampionModel.updateOne(
            { _id: championData._id },
            { $set: updateData },
          );

          const champName =
            typeof championData.name === 'string'
              ? championData.name
              : championData.name?.en || 'Unknown';

          console.log(`‚úÖ Fixed items for ${champName}`);
          updated++;
        } else {
          noChangeNeeded++;
        }
      } catch (error) {
        const champName =
          typeof champion.name === 'string'
            ? champion.name
            : champion.name?.en || 'Unknown';

        console.error(`‚ùå Error fixing items for ${champName}:`, error.message);
      }
    }

    console.log(`\nüìä Fix Summary:`);
    console.log(`‚úÖ Fixed: ${updated}`);
    console.log(`‚è≠Ô∏è  No change needed: ${noChangeNeeded}`);
    console.log(`üìù Total processed: ${champions.length}`);
  }

  /**
   * List all unique items to check translations
   */
  async listAllItems() {
    console.log('üìã Listing all unique items...');

    const champions = await this.tftChampionModel.find().lean();
    const allItems = new Set<string>();

    champions.forEach((champion: any) => {
      // From recommendedItems
      if (
        champion.recommendedItems &&
        Array.isArray(champion.recommendedItems)
      ) {
        champion.recommendedItems.forEach((item: any) => {
          if (typeof item === 'string') {
            allItems.add(item);
          } else if (typeof item === 'object' && item.en) {
            allItems.add(item.en);
          }
        });
      }

      // From recommendedItemsData
      if (
        champion.recommendedItemsData &&
        Array.isArray(champion.recommendedItemsData)
      ) {
        champion.recommendedItemsData.forEach((item: any) => {
          if (item.name) {
            if (typeof item.name === 'string') {
              allItems.add(item.name);
            } else if (typeof item.name === 'object' && item.name.en) {
              allItems.add(item.name.en);
            }
          }
        });
      }
    });

    console.log('\nüõ°Ô∏è  All items found:');
    Array.from(allItems)
      .sort()
      .forEach((item) => {
        const viItem = this.getVietnameseItemName(item);
        const hasTranslation = viItem !== item;
        console.log(
          `- ${item} ${hasTranslation ? '‚úÖ' : '‚ùå'} ${hasTranslation ? `‚Üí ${viItem}` : '(No translation)'}`,
        );
      });

    return allItems;
  }

  /**
   * Validate the fix by checking a few champions
   */
  async validateFix() {
    console.log('\nüîç Validating items fix...');

    const champions = await this.tftChampionModel.find().limit(3).lean();

    champions.forEach((champion: any, index) => {
      const champName =
        typeof champion.name === 'string'
          ? champion.name
          : champion.name?.en || 'Unknown';

      console.log(`\n${index + 1}. ${champName}:`);

      // Check recommendedItems structure
      if (champion.recommendedItems && champion.recommendedItems.length > 0) {
        const firstItem = champion.recommendedItems[0];
        const isMultilingual =
          typeof firstItem === 'object' && firstItem.en && firstItem.vi;
        console.log(
          `   üì¶ recommendedItems: ${isMultilingual ? '‚úÖ Multilingual' : '‚ùå Not multilingual'}`,
        );
        if (isMultilingual) {
          console.log(
            `       Example: EN(${firstItem.en}) / VI(${firstItem.vi})`,
          );
        }
      }

      // Check recommendedItemsData structure
      if (
        champion.recommendedItemsData &&
        champion.recommendedItemsData.length > 0
      ) {
        const firstItem = champion.recommendedItemsData[0];
        const hasMultilingualName =
          firstItem.name &&
          typeof firstItem.name === 'object' &&
          firstItem.name.en &&
          firstItem.name.vi;
        console.log(
          `   üéØ recommendedItemsData: ${hasMultilingualName ? '‚úÖ Multilingual' : '‚ùå Not multilingual'}`,
        );
        if (hasMultilingualName) {
          console.log(
            `       Example: EN(${firstItem.name.en}) / VI(${firstItem.name.vi})`,
          );
        }
      }
    });
  }
}

async function runItemsFix() {
  const app = await NestFactory.createApplicationContext(AppModule);

  try {
    const tftChampionModel = app.get<Model<TftChampion>>(
      getModelToken(TftChampion.name),
    );
    const fixer = new TftItemsFixer(tftChampionModel);

    console.log('üöÄ TFT Items Fix Tool');
    console.log('=====================');

    // 1. List all items first
    await fixer.listAllItems();

    // 2. Fix items
    await fixer.fixRecommendedItems();

    // 3. Validate fix
    await fixer.validateFix();

    console.log('\nüéâ Items fix completed!');
  } catch (error) {
    console.error('‚ùå Items fix failed:', error.message);
    console.error(error.stack);
  } finally {
    await app.close();
  }
}

// Run the fix
runItemsFix();
