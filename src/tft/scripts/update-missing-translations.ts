import { NestFactory } from '@nestjs/core';
import { AppModule } from '../../app.module';
import { getModelToken } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { TftChampion } from '../schemas/tft-champion.schema';

class TftTranslationUpdater {
  constructor(private readonly tftChampionModel: Model<TftChampion>) {}

  /**
   * Enhanced Vietnamese trait mapping
   */
  private getVietnameseTraitMapping(): Record<string, string> {
    return {
      // Set 14 TFT traits
      Rebel: 'K·∫ª N·ªïi Lo·∫°n',
      Marksman: 'X·∫° Th·ªß',
      Sorcerer: 'Ph√π Th·ªßy',
      Brawler: 'V√µ Sƒ©',
      Bruiser: 'V√µ Sƒ©',
      Infiltrator: '√Åm S√°t',
      Support: 'H·ªó Tr·ª£',
      Mystic: 'Huy·ªÅn Thu·∫≠t',
      Protector: 'B·∫£o V·ªá',
      Blademaster: 'Ki·∫øm Sƒ©',
      Vanguard: 'Ti·ªÅn Phong',
      Demolitionist: 'Ph√° H·ªßy',
      Cybernetic: 'ƒêi·ªán T·ª≠',
      Void: 'H∆∞ Kh√¥ng',
      'Dark Star': 'Ng√¥i Sao ƒêen',
      'Mech-Pilot': 'Phi C√¥ng Robot',
      Chrono: 'Th·ªùi Gian',
      Battlecast: 'Chi·∫øn Thu·∫≠t',
      Astro: 'Phi H√†nh Gia',
      Sniper: 'B·∫Øn T·ªâa',

      // Set 14 current traits from analysis
      'Golden Ox': 'B√≤ V√†ng',
      'A.M.P.': 'A.M.P.',
      'Anima Squad': 'ƒê·ªôi Linh H·ªìn',
      Bastion: 'Ph√°o ƒê√†i',
      BoomBots: 'Robot N·ªï',
      Cyberboss: '√îng Ch·ªß M·∫°ng',
      Cypher: 'M·∫≠t M√£',
      Divinicorp: 'T·∫≠p ƒêo√†n Th·∫ßn Th√°nh',
      Dynamo: 'M√°y Ph√°t ƒêi·ªán',
      Executioner: 'ƒêao Ph·ªß',
      Exotech: 'C√¥ng Ngh·ªá Ngo·∫°i',
      'God of the Net': 'Th·∫ßn M·∫°ng',
      Nitro: 'Nitro',
      Overlord: 'B√° Ch·ªß',
      Rapidfire: 'B·∫Øn Nhanh',
      Slayer: 'S√°t Th·ªß',
      'Soul Killer': 'Gi·∫øt Linh H·ªìn',
      Strategist: 'Chi·∫øn L∆∞·ª£c Gia',
      'Street Demon': 'Qu·ª∑ ƒê∆∞·ªùng Ph·ªë',
      Syndicate: 'T·ªï Ch·ª©c',
      Techie: 'K·ªπ Thu·∫≠t Vi√™n',
      Virus: 'Vi-r√∫t',

      // Additional common traits
      Sentinel: 'L√≠nh Canh',
      Invoker: 'Tri·ªáu H·ªìi S∆∞',
      Academy: 'H·ªçc Vi·ªán',
      Challenger: 'Th√°ch ƒê·∫•u',
      Colossus: 'Kh·ªïng L·ªì',
      Dominator: 'Th·ªëng Tr·ªã',
      Emissary: 'S·ª© Gi·∫£',
      Family: 'Gia ƒê√¨nh',
      Form: 'H√¨nh Th√°i',
      Frost: 'BƒÉng Gi√°',
      Honeymancy: 'Thu·∫≠t M·∫≠t Ong',
      Multistriker: 'ƒêa ƒê√≤n',
      Portal: 'C·ªïng Th·ªùi Gian',
      Preserver: 'B·∫£o T·ªìn',
      Pyro: 'H·ªèa Thu·∫≠t',
      Quickstriker: 'ƒê√≤n Nhanh',
      Scholar: 'H·ªçc Gi·∫£',
      Shapeshifter: 'Bi·∫øn H√¨nh',
      Sugarcraft: 'Th·ªß C√¥ng ƒê∆∞·ªùng',
      Visionary: 'Vi·ªÖn Ki·∫øn',
      Warrior: 'Chi·∫øn Binh',
      Witchcraft: 'Ph√π Th·ªßy',
    };
  }

  /**
   * Get Vietnamese translation for trait
   */
  private getVietnameseTrait(englishTrait: string): string {
    const mapping = this.getVietnameseTraitMapping();
    return mapping[englishTrait] || englishTrait;
  }

  /**
   * Update missing Vietnamese translations for traits
   */
  async updateMissingTranslations() {
    console.log('üîÑ Updating missing Vietnamese translations...');

    const champions = await this.tftChampionModel.find().lean();
    let updated = 0;
    let noChangeNeeded = 0;

    for (const champion of champions) {
      try {
        const championData = champion as any;
        let needsUpdate = false;
        const updateData: any = {};

        // Check and update traits
        if (championData.traits && Array.isArray(championData.traits)) {
          const updatedTraits = championData.traits.map((trait: any) => {
            if (typeof trait === 'object' && trait.en) {
              const newViTrait = this.getVietnameseTrait(trait.en);
              if (trait.vi !== newViTrait) {
                needsUpdate = true;
                return {
                  en: trait.en,
                  vi: newViTrait,
                };
              }
              return trait;
            }
            return trait;
          });

          if (needsUpdate) {
            updateData.traits = updatedTraits;
          }
        }

        // Check and update ability name if needed
        if (championData.ability && championData.ability.name) {
          const abilityName = championData.ability.name;
          if (
            typeof abilityName === 'object' &&
            abilityName.en &&
            abilityName.vi
          ) {
            // If Vietnamese ability name looks like a placeholder, update it
            if (
              abilityName.vi.includes('K·ªπ NƒÉng') &&
              abilityName.vi.includes(' - ')
            ) {
              needsUpdate = true;
              updateData.ability = {
                ...championData.ability,
                name: {
                  en: abilityName.en,
                  vi: abilityName.en, // Use English name as Vietnamese for now
                },
              };
            }
          }
        }

        if (needsUpdate) {
          await this.tftChampionModel.updateOne(
            { _id: championData._id },
            { $set: updateData },
          );

          const champName =
            typeof championData.name === 'string'
              ? championData.name
              : championData.name?.en || 'Unknown';

          console.log(`‚úÖ Updated ${champName}`);
          updated++;
        } else {
          noChangeNeeded++;
        }
      } catch (error) {
        const champName =
          typeof champion.name === 'string'
            ? champion.name
            : champion.name?.en || 'Unknown';

        console.error(`‚ùå Error updating ${champName}:`, error.message);
      }
    }

    console.log(`\nüìä Update Summary:`);
    console.log(`‚úÖ Updated: ${updated}`);
    console.log(`‚è≠Ô∏è  No change needed: ${noChangeNeeded}`);
    console.log(`üìù Total processed: ${champions.length}`);
  }

  /**
   * List all unique traits to check translations
   */
  async listAllTraits() {
    console.log('üìã Listing all unique traits...');

    const champions = await this.tftChampionModel.find().lean();
    const allTraits = new Set<string>();

    champions.forEach((champion: any) => {
      if (champion.traits && Array.isArray(champion.traits)) {
        champion.traits.forEach((trait: any) => {
          if (typeof trait === 'object' && trait.en) {
            allTraits.add(trait.en);
          } else if (typeof trait === 'string') {
            allTraits.add(trait);
          }
        });
      }
    });

    console.log('\nüè∑Ô∏è  All traits found:');
    Array.from(allTraits)
      .sort()
      .forEach((trait) => {
        const viTrait = this.getVietnameseTrait(trait);
        const hasTranslation = viTrait !== trait;
        console.log(
          `- ${trait} ${hasTranslation ? '‚úÖ' : '‚ùå'} ${hasTranslation ? `‚Üí ${viTrait}` : '(No translation)'}`,
        );
      });

    return allTraits;
  }
}

async function runTranslationUpdate() {
  const app = await NestFactory.createApplicationContext(AppModule);

  try {
    const tftChampionModel = app.get<Model<TftChampion>>(
      getModelToken(TftChampion.name),
    );
    const updater = new TftTranslationUpdater(tftChampionModel);

    console.log('üöÄ TFT Translation Update Tool');
    console.log('===============================');

    // 1. List all traits first
    await updater.listAllTraits();

    // 2. Update missing translations
    await updater.updateMissingTranslations();

    console.log('\nüéâ Translation update completed!');
  } catch (error) {
    console.error('‚ùå Translation update failed:', error.message);
    console.error(error.stack);
  } finally {
    await app.close();
  }
}

// Run the update
runTranslationUpdate();
