import { NestFactory } from '@nestjs/core';
import { AppModule } from '../../app.module';
import { getModelToken } from '@nestjs/mongoose';
import { Model } from 'mongoose';
import { TftItem } from '../schemas/tft-item.schema';

// Vietnamese translations mapping
const VIETNAMESE_TRANSLATIONS = {
  // Basic items
  'B.F. Sword': 'Ki·∫øm B.F.',
  'Chain Vest': '√Åo Gi√°p X√≠ch',
  "Giant's Belt": 'ƒêai Kh·ªïng L·ªì',
  'Needlessly Large Rod': 'G·∫≠y Ma Thu·∫≠t L·ªõn',
  'Recurve Bow': 'Cung Cong',
  'Sparring Gloves': 'GƒÉng Tay ƒê·∫•u',
  Spatula: 'Th√¨a M√∫c',
  'Tear of the Goddess': 'N∆∞·ªõc M·∫Øt N·ªØ Th·∫ßn',

  // Completed items
  "Archangel's Staff": 'G·∫≠y T·ªïng L√£nh Thi√™n Th·∫ßn',
  Bloodthirster: 'Ki·∫øm H√∫t M√°u',
  'Blue Buff': 'Buff Xanh',
  Deathblade: 'L∆∞·ª°i T·ª≠ Th·∫ßn',
  'Edge of Night': 'B√≥ng ƒê√™m',
  'Gargoyle Stoneplate': 'Gi√°p ƒê√° Gargoyle',
  Guardbreaker: 'Ph√° Gi√°p',
  "Guinsoo's Rageblade": 'L∆∞·ª°i Ph·∫´n N·ªô Guinsoo',
  'Hand of Justice': 'B√†n Tay C√¥ng L√Ω',
  'Hextech Gunblade': 'Ki·∫øm S√∫ng Hextech',
  'Hyper Fangs': 'RƒÉng Nanh Si√™u C·∫•p',
  'Infinity Edge': 'L∆∞·ª°i V√¥ C·ª±c',
  'Jeweled Gauntlet': 'GƒÉng Tay Ng·ªçc',
  'Last Whisper': 'L·ªùi Th√¨ Th·∫ßm Cu·ªëi',
  Morellonomicon: 'Morellonomicon',
  "Nashor's Tooth": 'RƒÉng Nashor',
  'Pulse Stabilizer': 'B·ªô ·ªîn ƒê·ªãnh Xung',
  Quicksilver: 'Th·ªßy Ng√¢n',
  "Rabadon's Deathcap": 'M≈© T·ª≠ Th·∫ßn Rabadon',
  'Red Buff': 'Buff ƒê·ªè',
  "Runaan's Hurricane": 'C∆°n B√£o Runaan',
  'Spear of Shojin': 'Gi√°o Shojin',
  'Statikk Shiv': 'Ki·∫øm S√©t Statikk',
  "Sterak's Gage": 'GƒÉng Tay Sterak',
  'Sunfire Cape': '√Åo Cho√†ng L·ª≠a M·∫∑t Tr·ªùi',
  "Titan's Resolve": '√ù Ch√≠ Titan',
  "Warmog's Armor": 'Gi√°p Warmog',
  'Flux Capacitor': 'T·ª• ƒêi·ªán T·ª´ Th√¥ng',

  // Set 14 specific items
  'Set 14': 'Phi√™n B·∫£n 14',
};

async function updateVietnameseTranslations() {
  const app = await NestFactory.createApplicationContext(AppModule);

  try {
    const tftItemModel = app.get<Model<TftItem>>(getModelToken(TftItem.name));

    console.log('üáªüá≥ Starting Vietnamese Translations Update');
    console.log('='.repeat(60));

    let updated = 0;
    let notFound = 0;
    let alreadyTranslated = 0;

    // Get all items
    const allItems = await tftItemModel.find({}).lean();
    console.log(`üìä Total items to check: ${allItems.length}`);

    for (const item of allItems) {
      try {
        const englishName = item.name?.en;
        const vietnameseName = item.name?.vi;

        if (!englishName) {
          console.log(`‚ö†Ô∏è  Item ${item._id} has no English name`);
          continue;
        }

        // Check if already has different Vietnamese translation
        if (vietnameseName && vietnameseName !== englishName) {
          console.log(
            `‚è≠Ô∏è  Item "${englishName}" already has Vietnamese translation: "${vietnameseName}"`,
          );
          alreadyTranslated++;
          continue;
        }

        // Check if we have translation for this item
        const vietnameseTranslation = VIETNAMESE_TRANSLATIONS[englishName];

        if (vietnameseTranslation) {
          // Update the item
          await tftItemModel.updateOne(
            { _id: item._id },
            {
              $set: {
                'name.vi': vietnameseTranslation,
              },
            },
          );

          console.log(
            `‚úÖ Updated: "${englishName}" ‚Üí "${vietnameseTranslation}"`,
          );
          updated++;
        } else {
          console.log(`‚ùì No translation found for: "${englishName}"`);
          notFound++;
        }
      } catch (error) {
        console.error(`‚ùå Error updating item ${item._id}:`, error.message);
      }
    }

    // Summary
    console.log('\nüéâ TRANSLATION UPDATE SUMMARY');
    console.log('='.repeat(40));
    console.log(`‚úÖ Successfully updated: ${updated} items`);
    console.log(`‚è≠Ô∏è  Already translated: ${alreadyTranslated} items`);
    console.log(`‚ùì No translation found: ${notFound} items`);
    console.log(`üìä Total processed: ${allItems.length} items`);

    // Show sample updated items
    if (updated > 0) {
      console.log('\nüìù SAMPLE UPDATED ITEMS');
      console.log('='.repeat(30));

      const updatedItems = await tftItemModel
        .find({
          $expr: {
            $ne: ['$name.en', '$name.vi'],
          },
        })
        .limit(5)
        .lean();

      updatedItems.forEach((item, index) => {
        console.log(
          `${index + 1}. EN: "${item.name.en}" ‚Üí VI: "${item.name.vi}"`,
        );
      });
    }

    // List items that still need translation
    if (notFound > 0) {
      console.log('\nüìã ITEMS STILL NEEDING TRANSLATION');
      console.log('='.repeat(35));

      const itemsNeedingTranslation = await tftItemModel
        .find({
          $expr: {
            $eq: ['$name.en', '$name.vi'],
          },
        })
        .limit(10)
        .lean();

      itemsNeedingTranslation.forEach((item, index) => {
        console.log(`${index + 1}. "${item.name.en}"`);
      });

      if (itemsNeedingTranslation.length === 10 && notFound > 10) {
        console.log(`... and ${notFound - 10} more items`);
      }
    }

    console.log('\nüí° NEXT STEPS:');
    console.log('- Test the API with Vietnamese language parameter');
    console.log('- Add more translations to VIETNAMESE_TRANSLATIONS mapping');
    console.log('- Consider using translation API for remaining items');
  } catch (error) {
    console.error('‚ùå Translation update failed:', error.message);
    console.error(error.stack);
  } finally {
    await app.close();
  }
}

// Run the translation update
updateVietnameseTranslations();
