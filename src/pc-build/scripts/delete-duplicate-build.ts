import { NestFactory } from '@nestjs/core';
import { AppModule } from '../../app.module';
import { PcBuildService } from '../pc-build.service';

async function deleteDuplicateBuild() {
  console.log('üóëÔ∏è Deleting duplicate build...\n');
  
  const app = await NestFactory.createApplicationContext(AppModule);
  const pcBuildService = app.get(PcBuildService);
  
  // ID c·ªßa b√†i vi·∫øt c≈© c·∫ßn x√≥a
  const oldBuildId = '682c0a81badf603f6f0a5ee6';
  const adminUserId = '681dcf20cf2e99c8b82923a7'; // Admin user ID
  
  try {
    // Ki·ªÉm tra b√†i vi·∫øt tr∆∞·ªõc khi x√≥a
    const build: any = await pcBuildService.findBuildById(oldBuildId);
    console.log(`üìã Found build to delete:`);
    console.log(`   - ID: ${oldBuildId}`);
    console.log(`   - Name: ${build.name}`);
    console.log(`   - Created: ${build.createdAt}`);
    console.log('');
    
    // X√≥a b√†i vi·∫øt (v·ªõi quy·ªÅn admin)
    await pcBuildService.deleteBuild(oldBuildId, adminUserId, ['admin']);
    console.log(`‚úÖ Successfully deleted duplicate build: ${oldBuildId}`);
    
    // Ki·ªÉm tra l·∫°i danh s√°ch sau khi x√≥a
    console.log('\nüîç Checking remaining builds...');
    const remainingBuilds = await pcBuildService.findAllBuilds(10, 1, 'vi');
    
    const sensConverterBuilds = remainingBuilds.builds.filter((build: any) => 
      build.name.includes('Sens Converter')
    );
    
    console.log(`üìä Remaining "Sens Converter" builds: ${sensConverterBuilds.length}`);
    sensConverterBuilds.forEach((build: any) => {
      console.log(`   - ID: ${build._id}, Created: ${build.createdAt}`);
    });
    
  } catch (error: any) {
    console.error(`‚ùå Error: ${error.message}`);
  } finally {
    await app.close();
  }
}

deleteDuplicateBuild().catch(console.error); 