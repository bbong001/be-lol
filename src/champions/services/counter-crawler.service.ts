import { Injectable } from '@nestjs/common';
import axios from 'axios';
import * as cheerio from 'cheerio';
import { CounterService } from './counter.service';
import { CreateCounterDto } from '../dto/counter.dto';

@Injectable()
export class CounterCrawlerService {
  constructor(private readonly counterService: CounterService) {}

  /**
   * Crawl counter data from kicdo.com for a specific champion and role
   */
  async crawlCounterData(
    championName: string,
    role: string,
    patch?: string,
    rank?: string,
  ): Promise<any> {
    const userAgent =
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36';

    let retryCount = 0;
    const maxRetries = 3;
    let rawHtmlContent = '';
    let rawResponseData = '';
    const errors: string[] = [];

    while (retryCount <= maxRetries) {
      try {
        console.log(
          `üîç Crawling counter data for ${championName} (${role}) - Attempt ${retryCount + 1}`,
        );

        // Create Axios instance with config
        const axiosInstance = axios.create({
          timeout: 30000,
          headers: {
            'User-Agent': userAgent,
            Accept:
              'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
            'Accept-Language': 'en-US,en;q=0.5',
            'Accept-Encoding': 'gzip, deflate, br',
            Connection: 'keep-alive',
            'Upgrade-Insecure-Requests': '1',
          },
        });

        // Make request to kicdo.com
        const url = `https://kicdo.com/counter/${championName.toLowerCase()}`;
        const response = await axiosInstance.get(url);

        // Store raw data
        rawHtmlContent = response.data;
        rawResponseData = JSON.stringify({
          status: response.status,
          headers: response.headers,
          url: response.config.url,
        });

        // Parse HTML
        const $ = cheerio.load(rawHtmlContent);

        // Extract counter data
        const counterData = this.parseCounterData($);

        // Extract formatted content
        const formattedContent = this.extractFormattedContent($);
        const contentSections = this.extractContentSections($);

        if (Object.keys(counterData).length === 0) {
          throw new Error('No counter data found on the page');
        }

        // Create and save counter data
        try {
          // Create counter DTO with all the data (b·ªè rawHtmlContent v√† rawResponseData ƒë·ªÉ ti·∫øt ki·ªám dung l∆∞·ª£ng)
          const createCounterDto: CreateCounterDto = {
            championId: championName,
            championName: championName,
            role: role,
            ...counterData,
            patch: patch || '15.10',
            rank: rank || 'Emerald+',
            region: 'World',
            formattedContent: formattedContent,
            ...contentSections,
            additionalData: this.extractAdditionalData($),
          };

          // Save to database
          const result = await this.counterService.create(createCounterDto);
          console.log(
            `‚úÖ Successfully crawled and saved counter data for ${championName} (${role})`,
          );

          // Log th√¥ng tin debug n·∫øu c·∫ßn (kh√¥ng l∆∞u v√†o DB)
          if (process.env.NODE_ENV === 'development') {
            console.log(
              `üìÑ Raw HTML size: ${rawHtmlContent.length} characters`,
            );
            console.log(
              `üìä Raw response data: ${rawResponseData.substring(0, 200)}...`,
            );
          }

          return result;
        } catch (saveError) {
          console.error('‚ùå Error saving counter data:', saveError.message);
          throw saveError;
        }
      } catch (error) {
        if (retryCount >= maxRetries) {
          console.error(
            `‚ùå Failed to crawl counter data after ${maxRetries + 1} attempts:`,
            error.message,
          );
          // Return a basic counter object even if crawling fails
          return {
            championId: championName,
            championName: championName,
            role: role,
            patch: patch || '15.10',
            rank: rank || 'Emerald+',
            region: 'World',
            overallWinRate: 0,
            pickRate: 0,
            banRate: 0,
            strongAgainst: [],
            weakAgainst: [],
            bestLaneCounters: [],
            worstLaneCounters: [],
            errors: errors,
          };
        } else {
          retryCount++;
          const errorMessage = `Attempt ${retryCount} failed: ${error.message}`;
          errors.push(errorMessage);
          console.warn(errorMessage);

          if (retryCount > maxRetries) {
            throw error;
          }

          // Wait before retry (exponential backoff)
          await this.sleep(Math.pow(2, retryCount) * 1000);
        }
      }
    }
  }

  /**
   * Parse counter data from the HTML content
   */
  private parseCounterData($: cheerio.CheerioAPI): any {
    const counterData: any = {
      overallWinRate: 0,
      pickRate: 0,
      banRate: 0,
      strongAgainst: [],
      weakAgainst: [],
      bestLaneCounters: [],
      worstLaneCounters: [],
    };

    try {
      // Extract champion stats t·ª´ text patterns
      $('*').each((_, element) => {
        const text = $(element).text().toLowerCase();

        // T√¨m win rate
        if (text.includes('t·ª∑ l·ªá th·∫Øng') || text.includes('winrate')) {
          const winRateMatch = text.match(/(\d+(?:\.\d+)?)%/);
          if (winRateMatch && !counterData.overallWinRate) {
            counterData.overallWinRate = parseFloat(winRateMatch[1]) || 0;
          }
        }
      });

      // Crawl counter champions t·ª´ h√¨nh ·∫£nh v√† sections
      this.extractCounterChampionsFromPage($, counterData);

      // Sort arrays by effectiveness
      counterData.weakAgainst.sort((a, b) => b.winRate - a.winRate);
      counterData.strongAgainst.sort((a, b) => a.winRate - b.winRate);
    } catch (error) {
      console.warn('Warning: Error parsing counter data:', error.message);
    }

    return counterData;
  }

  /**
   * Extract counter champions t·ª´ trang web
   */
  private extractCounterChampionsFromPage(
    $: cheerio.CheerioAPI,
    counterData: any,
  ): void {
    try {
      // T√¨m c√°c section headers c·ª• th·ªÉ t·ª´ HTML structure
      this.extractChampionsBySection($, counterData);

      // Fallback context analysis n·∫øu c·∫ßn (kh√¥ng d·ª±a v√†o totalChampions n·ªØa)
      const needsFallback = counterData.weakAgainst.length === 0;

      if (needsFallback) {
        console.log(
          `‚ö†Ô∏è Running fallback analysis - WeakAgainst: ${counterData.weakAgainst.length}`,
        );

        // Detect target champion name from page
        const pageTitle = $('title').text().toLowerCase();
        const h1Text = $('h1').first().text().toLowerCase();
        let targetChampionName = '';

        // Extract champion name from URL pattern or title
        const urlMatch = pageTitle.match(/counter\/([a-z']+)/);
        if (urlMatch) {
          targetChampionName = urlMatch[1];
        } else {
          // Try to extract from title or h1
          const words = (pageTitle + ' ' + h1Text).split(/\s+/);
          for (const word of words) {
            if (word.length > 3 && /^[a-z']+$/.test(word)) {
              targetChampionName = word;
              break;
            }
          }
        }

        this.analyzeAndReclassifyChampions($, counterData, targetChampionName);
      }
    } catch (error) {
      console.warn(
        'Warning: Error extracting counter champions from page:',
        error.message,
      );
    }
  }

  /**
   * Extract champions d·ª±a tr√™n section headers
   */
  private extractChampionsBySection(
    $: cheerio.CheerioAPI,
    counterData: any,
  ): void {
    console.log('üîç Looking for section headers...');

    // T√¨m t·∫•t c·∫£ section headers v√† l∆∞u th√¥ng tin v·ªÅ ch√∫ng
    const sectionInfo: Array<{
      element: any;
      $header: cheerio.Cheerio<any>;
      headerText: string;
      sectionType: string;
      champCount: number;
      $sectionRow: any;
    }> = [];

    // T√¨m t·∫•t c·∫£ c√°c section v·ªõi header v√† content ri√™ng bi·ªát
    $('.chu_vang, h1, h2, h3, h4, p.chu_vang').each((_, headerElement) => {
      const $header = $(headerElement);
      const headerText = $header.text().toLowerCase().trim();

      console.log(`üìã Found header: "${headerText}"`);

      let sectionType = '';

      // Ph√¢n lo·∫°i section d·ª±a tr√™n header text c·ª• th·ªÉ
      if (headerText.includes('t∆∞·ªõng kh·∫Øc ch·∫ø')) {
        // "T∆∞·ªõng kh·∫Øc ch·∫ø Zeri" - Champions that counter Zeri (Zeri is weak against)
        sectionType = 'weakAgainst';
        console.log(`‚úÖ Identified as weakAgainst section: "${headerText}"`);
      } else if (headerText.includes('t∆∞·ªõng y·∫øu h∆°n')) {
        // "T∆∞·ªõng y·∫øu h∆°n Zeri" - Champions weaker than Zeri (strongAgainst)
        sectionType = 'strongAgainst';
        console.log(`‚úÖ Identified as strongAgainst section: "${headerText}"`);
      } else if (
        headerText.includes('t·ª∑ l·ªá th·∫Øng cao') ||
        headerText.includes('t·ª∑ l·ªá th·∫Øng cao khi ƒë·ªëi ƒë·∫ßu')
      ) {
        // "T∆∞·ªõng c√≥ t·ª∑ l·ªá th·∫Øng cao khi ƒë·ªëi ƒë·∫ßu Zeri"
        sectionType = 'bestLaneCounters';
        console.log(
          `‚úÖ Identified as bestLaneCounters section: "${headerText}"`,
        );
      } else {
        console.log(`‚ùå Unknown section type: "${headerText}"`);
      }

      if (sectionType) {
        // T√¨m row ngay ti·∫øp theo ch·ªâ thu·ªôc v·ªÅ section n√†y
        let $sectionRow = null;

        // Ph∆∞∆°ng ph√°p 1: T√¨m row ngay sau header trong DOM sequence
        let $next = $header.next();
        while (
          $next.length &&
          !$next.hasClass('row') &&
          !$next.find('.row').length
        ) {
          $next = $next.next();
        }

        if ($next.hasClass('row')) {
          $sectionRow = $next;
        } else if ($next.find('.row').length) {
          $sectionRow = $next.find('.row').first();
        }

        // Ph∆∞∆°ng ph√°p 2: N·∫øu kh√¥ng t√¨m th·∫•y, t√¨m trong nextAll v·ªõi ƒëi·ªÅu ki·ªán
        if (
          !$sectionRow ||
          !$sectionRow.length ||
          !$sectionRow.find('.list_champ').length
        ) {
          // T√¨m t·∫•t c·∫£ .row sau header v√† ki·ªÉm tra xem row n√†o g·∫ßn nh·∫•t v·ªõi header n√†y
          const allRowsAfter = $header.nextAll('.row');
          if (allRowsAfter.length > 0) {
            // L·∫•y row ƒë·∫ßu ti√™n l√†m candidate
            $sectionRow = allRowsAfter.first();

            // Ki·ªÉm tra xem c√≥ header kh√°c gi·ªØa header hi·ªán t·∫°i v√† row n√†y kh√¥ng
            const elementsBetween = $header.nextUntil($sectionRow);
            const hasOtherHeaderBetween =
              elementsBetween.filter('.chu_vang, h1, h2, h3, h4, p.chu_vang')
                .length > 0;

            if (hasOtherHeaderBetween) {
              console.log(
                `   ‚ö†Ô∏è Found other header between ${sectionType} header and row, row might belong to different section`,
              );
              $sectionRow = null;
            }
          }
        }

        // ƒê·∫øm s·ªë champions th·ª±c t·∫ø
        const champCount =
          $sectionRow && $sectionRow.length
            ? $sectionRow.find('.list_champ img').length
            : 0;

        // Ch·ªâ th√™m v√†o sectionInfo n·∫øu th·ª±c s·ª± c√≥ champions
        if (champCount > 0) {
          sectionInfo.push({
            element: headerElement,
            $header,
            headerText,
            sectionType,
            champCount,
            $sectionRow,
          });

          console.log(
            `üì¶ Section "${headerText}" has ${champCount} champions for ${sectionType}`,
          );
        } else {
          console.log(`‚ö†Ô∏è Section "${headerText}" has NO champions - skipping`);
        }
      }
    });

    // X·ª≠ l√Ω sections theo th·ª© t·ª± ∆∞u ti√™n - strongAgainst v√† bestLaneCounters tr∆∞·ªõc, weakAgainst cu·ªëi
    const prioritizedSections = sectionInfo
      .filter((section) => section.champCount > 0) // Ch·ªâ l·∫•y section c√≥ champions
      .sort((a, b) => {
        // ∆Øu ti√™n x·ª≠ l√Ω strongAgainst v√† bestLaneCounters tr∆∞·ªõc, weakAgainst cu·ªëi
        const typeOrder = {
          strongAgainst: 1,
          bestLaneCounters: 2,
          weakAgainst: 3, // X·ª≠ l√Ω cu·ªëi c√πng
        };
        if (typeOrder[a.sectionType] !== typeOrder[b.sectionType]) {
          return typeOrder[a.sectionType] - typeOrder[b.sectionType];
        }

        // V·ªõi c√πng lo·∫°i section, ∆∞u ti√™n header ng·∫Øn h∆°n (c·ª• th·ªÉ h∆°n)
        return a.headerText.length - b.headerText.length;
      });

    console.log(
      `üìä Processing ${prioritizedSections.length} sections with champions...`,
    );

    // X·ª≠ l√Ω t·ª´ng section theo th·ª© t·ª± ∆∞u ti√™n
    for (const section of prioritizedSections) {
      // Ki·ªÉm tra xem category n√†y ƒë√£ c√≥ data ch∆∞a
      let hasExistingData = false;
      if (
        section.sectionType === 'weakAgainst' &&
        counterData.weakAgainst.length > 0
      ) {
        hasExistingData = true;
      } else if (
        section.sectionType === 'strongAgainst' &&
        counterData.strongAgainst.length > 0
      ) {
        hasExistingData = true;
      } else if (
        section.sectionType === 'bestLaneCounters' &&
        counterData.bestLaneCounters.length > 0
      ) {
        hasExistingData = true;
      }

      if (hasExistingData) {
        console.log(
          `‚è≠Ô∏è Skipping section "${section.headerText}" - ${section.sectionType} already has data`,
        );
        continue;
      }

      console.log(
        `üîç Processing section: ${section.sectionType} - "${section.headerText}" with ${section.champCount} champions`,
      );

      // Process this section with the verified $sectionRow
      this.processSectionContent(section, $, counterData);
    }
  }

  /**
   * Process section content ƒë·ªÉ extract champions
   */
  private processSectionContent(
    section: {
      element: any;
      $header: cheerio.Cheerio<any>;
      headerText: string;
      sectionType: string;
      champCount: number;
      $sectionRow: any;
    },
    $: cheerio.CheerioAPI,
    counterData: any,
  ): void {
    const { sectionType, headerText, $sectionRow } = section;

    // S·ª≠ d·ª•ng $sectionRow ƒë√£ ƒë∆∞·ª£c verify t·ª´ extractChampionsBySection
    if ($sectionRow && $sectionRow.length) {
      const champCount = $sectionRow.find('.list_champ img').length;
      console.log(
        `üì¶ Processing verified section row with ${champCount} champions for ${sectionType}`,
      );

      if (champCount > 0) {
        $sectionRow.find('.list_champ').each((_, champElement) => {
          const $champDiv = $(champElement);
          const $img = $champDiv.find('img').first();

          if ($img.length) {
            const alt = $img.attr('alt') || '';
            const src = $img.attr('src') || '';
            const title = $img.attr('title') || '';

            if (this.isChampionImage(alt, src, title)) {
              const championName = this.extractChampionNameFromImage(
                alt,
                src,
                title,
              );

              if (championName && championName.length > 2) {
                console.log(
                  `üéØ Found champion: ${championName} in ${sectionType}`,
                );

                // Ki·ªÉm tra tr√πng l·∫∑p - ch·ªâ trong category hi·ªán t·∫°i
                let existsInCurrentCategory = false;

                if (sectionType === 'weakAgainst') {
                  existsInCurrentCategory = counterData.weakAgainst.find(
                    (c) => c.championName === championName,
                  );
                } else if (sectionType === 'strongAgainst') {
                  existsInCurrentCategory = counterData.strongAgainst.find(
                    (c) => c.championName === championName,
                  );
                } else if (sectionType === 'bestLaneCounters') {
                  existsInCurrentCategory = counterData.bestLaneCounters.find(
                    (c) => c.championName === championName,
                  );
                }

                // Ch·ªâ ki·ªÉm tra tr√πng l·∫∑p trong c√πng category
                if (!existsInCurrentCategory) {
                  const championData = this.createChampionCounterData(
                    championName,
                    $img,
                  );

                  // Th√™m v√†o ƒë√∫ng category
                  if (sectionType === 'weakAgainst') {
                    counterData.weakAgainst.push(championData);
                    console.log(`   ‚úÖ Added to weakAgainst: ${championName}`);
                  } else if (sectionType === 'strongAgainst') {
                    counterData.strongAgainst.push(championData);
                    console.log(
                      `   ‚úÖ Added to strongAgainst: ${championName}`,
                    );
                  } else if (sectionType === 'bestLaneCounters') {
                    counterData.bestLaneCounters.push(championData);
                    console.log(
                      `   ‚úÖ Added to bestLaneCounters: ${championName}`,
                    );
                  }
                } else {
                  console.log(
                    `   ‚ö†Ô∏è Champion ${championName} already exists in ${sectionType}, skipping duplicate`,
                  );
                }
              }
            }
          }
        });
      } else {
        console.log(
          `   ‚ùå No champion images found in section row for ${sectionType}`,
        );
      }
    } else {
      console.log(`   ‚ùå No verified section row available for ${sectionType}`);
    }

    console.log(
      `üìä Section "${headerText}" processed - ${sectionType}: ${
        sectionType === 'weakAgainst'
          ? counterData.weakAgainst.length
          : sectionType === 'strongAgainst'
            ? counterData.strongAgainst.length
            : sectionType === 'bestLaneCounters'
              ? counterData.bestLaneCounters.length
              : 0
      } champions`,
    );
  }

  /**
   * Fallback: Extract champions t·ª´ images n·∫øu kh√¥ng t√¨m th·∫•y section r√µ r√†ng
   */
  private extractChampionsFromImages(
    $: cheerio.CheerioAPI,
    counterData: any,
  ): void {
    console.log('üîç Extracting champions from images with context analysis...');

    // T√¨m t·∫•t c·∫£ h√¨nh ·∫£nh champion
    $('img').each((_, imgElement) => {
      const $img = $(imgElement);
      const alt = $img.attr('alt') || '';
      const src = $img.attr('src') || '';
      const title = $img.attr('title') || '';

      // Ki·ªÉm tra xem c√≥ ph·∫£i h√¨nh champion kh√¥ng
      if (this.isChampionImage(alt, src, title)) {
        const championName = this.extractChampionNameFromImage(alt, src, title);
        if (championName && championName.length > 2) {
          // Ki·ªÉm tra xem ƒë√£ c√≥ champion n√†y ch∆∞a
          const existsInAny =
            counterData.weakAgainst.find(
              (c) => c.championName === championName,
            ) ||
            counterData.strongAgainst.find(
              (c) => c.championName === championName,
            ) ||
            counterData.bestLaneCounters.find(
              (c) => c.championName === championName,
            ) ||
            counterData.worstLaneCounters.find(
              (c) => c.championName === championName,
            );

          if (!existsInAny) {
            const championData = this.createChampionCounterData(
              championName,
              $img,
            );

            // Ph√¢n t√≠ch context chi ti·∫øt ƒë·ªÉ x√°c ƒë·ªãnh lo·∫°i counter
            const context = this.getImageContext($, $img);
            const parentText = $img
              .closest('div, section, article')
              .text()
              .toLowerCase();
            const nearbyText = $img.parent().text().toLowerCase();

            console.log(`üîç Analyzing ${championName}:`);
            console.log(`   Context: "${context.substring(0, 100)}..."`);
            console.log(`   Parent text: "${parentText.substring(0, 100)}..."`);
            console.log(`   Nearby text: "${nearbyText.substring(0, 100)}..."`);

            // Logic ph√¢n lo·∫°i d·ª±a tr√™n context v·ªõi dynamic champion name
            const targetChampLower = championName.toLowerCase();

            // Ki·ªÉm tra tr√πng l·∫∑p tr∆∞·ªõc khi ph√¢n lo·∫°i
            const isWeakAgainstCandidate =
              context.includes(`kh·∫Øc ch·∫ø ${targetChampLower}`) ||
              context.includes(`counter ${targetChampLower}`) ||
              parentText.includes(`t∆∞·ªõng kh·∫Øc ch·∫ø ${targetChampLower}`) ||
              nearbyText.includes(`kh·∫Øc ch·∫ø ${targetChampLower}`) ||
              context.includes('t∆∞·ªõng kh·∫Øc ch·∫ø') ||
              parentText.includes('counter') ||
              nearbyText.includes('kh·∫Øc ch·∫ø');

            const isStrongAgainstCandidate =
              context.includes(`${targetChampLower} kh·∫Øc ch·∫ø`) ||
              context.includes(`${targetChampLower} counter`) ||
              parentText.includes(`${targetChampLower} kh·∫Øc ch·∫ø`) ||
              nearbyText.includes(`${targetChampLower} kh·∫Øc ch·∫ø`) ||
              context.includes('y·∫øu h∆°n') ||
              context.includes('weak') ||
              context.includes('t∆∞·ªõng y·∫øu');

            const isBestLaneCountersCandidate =
              context.includes('t·ª∑ l·ªá th·∫Øng cao') ||
              context.includes('th·∫Øng cao') ||
              context.includes('c√≥ l·ª£i th·∫ø') ||
              context.includes('win rate') ||
              parentText.includes('t·ª∑ l·ªá th·∫Øng') ||
              nearbyText.includes('th·ªëng k√™');

            // ∆Øu ti√™n strongAgainst v√† bestLaneCounters tr∆∞·ªõc
            if (isStrongAgainstCandidate) {
              // Ki·ªÉm tra tr√πng l·∫∑p ch·ªâ trong strongAgainst
              const existsInStrongAgainst = counterData.strongAgainst.find(
                (c) => c.championName === championName,
              );
              if (!existsInStrongAgainst) {
                counterData.strongAgainst.push(championData);
                console.log(`   ‚úÖ Added to strongAgainst: ${championName}`);
              }
            } else if (isBestLaneCountersCandidate) {
              // Ki·ªÉm tra tr√πng l·∫∑p ch·ªâ trong bestLaneCounters
              const existsInBestLane = counterData.bestLaneCounters.find(
                (c) => c.championName === championName,
              );
              if (!existsInBestLane) {
                counterData.bestLaneCounters.push(championData);
                console.log(`   ‚úÖ Added to bestLaneCounters: ${championName}`);
              }
            } else if (isWeakAgainstCandidate) {
              // Ki·ªÉm tra tr√πng l·∫∑p ch·ªâ trong weakAgainst
              const existsInWeakAgainst = counterData.weakAgainst.find(
                (c) => c.championName === championName,
              );
              if (!existsInWeakAgainst) {
                counterData.weakAgainst.push(championData);
                console.log(`   ‚úÖ Added to weakAgainst: ${championName}`);
              }
            } else {
              // Ph√¢n t√≠ch th√™m d·ª±a tr√™n v·ªã tr√≠ trong trang
              const allImages = $('img').toArray();
              const imgIndex = allImages.indexOf(imgElement);
              const totalImages = allImages.length;

              if (imgIndex < totalImages * 0.3) {
                // Ki·ªÉm tra tr√πng l·∫∑p ch·ªâ trong weakAgainst
                const existsInWeakAgainst = counterData.weakAgainst.find(
                  (c) => c.championName === championName,
                );
                if (!existsInWeakAgainst) {
                  counterData.weakAgainst.push(championData);
                  console.log(
                    `   ‚úÖ Added to weakAgainst (position-based): ${championName}`,
                  );
                }
              } else if (imgIndex > totalImages * 0.7) {
                // Ki·ªÉm tra tr√πng l·∫∑p ch·ªâ trong strongAgainst
                const existsInStrongAgainst = counterData.strongAgainst.find(
                  (c) => c.championName === championName,
                );
                if (!existsInStrongAgainst) {
                  counterData.strongAgainst.push(championData);
                  console.log(
                    `   ‚úÖ Added to strongAgainst (position-based): ${championName}`,
                  );
                }
              } else {
                // Ki·ªÉm tra tr√πng l·∫∑p ch·ªâ trong bestLaneCounters
                const existsInBestLane = counterData.bestLaneCounters.find(
                  (c) => c.championName === championName,
                );
                if (!existsInBestLane) {
                  counterData.bestLaneCounters.push(championData);
                  console.log(
                    `   ‚úÖ Added to bestLaneCounters (position-based): ${championName}`,
                  );
                }
              }
            }
          }
        }
      }
    });

    console.log(`üìä Final distribution:`);
    console.log(
      `   - Weak Against: ${counterData.weakAgainst.length} champions`,
    );
    console.log(
      `   - Strong Against: ${counterData.strongAgainst.length} champions`,
    );
    console.log(
      `   - Best Lane Counters: ${counterData.bestLaneCounters.length} champions`,
    );
    console.log(
      `   - Worst Lane Counters: ${counterData.worstLaneCounters.length} champions`,
    );
  }

  /**
   * Ki·ªÉm tra xem c√≥ ph·∫£i h√¨nh champion kh√¥ng
   */
  private isChampionImage(alt: string, src: string, title: string): boolean {
    // Danh s√°ch champion names ƒë·ªÉ check
    const validChampions = [
      'Aatrox',
      'Ahri',
      'Akali',
      'Alistar',
      'Amumu',
      'Anivia',
      'Annie',
      'Ashe',
      'Azir',
      'Bard',
      'Blitzcrank',
      'Brand',
      'Braum',
      'Caitlyn',
      'Camille',
      'Cassiopeia',
      "Cho'Gath",
      'Corki',
      'Darius',
      'Diana',
      'Draven',
      'Ekko',
      'Elise',
      'Evelynn',
      'Ezreal',
      'Fiddlesticks',
      'Fiora',
      'Fizz',
      'Galio',
      'Gangplank',
      'Garen',
      'Gnar',
      'Gragas',
      'Graves',
      'Gwen',
      'Hecarim',
      'Heimerdinger',
      'Irelia',
      'Ivern',
      'Janna',
      'Jarvan',
      'Jax',
      'Jayce',
      'Jhin',
      'Jinx',
      "Kai'Sa",
      'Kalista',
      'Karma',
      'Karthus',
      'Kassadin',
      'Katarina',
      'Kayle',
      'Kayn',
      'Kennen',
      "Kha'Zix",
      'Kindred',
      'Kled',
      "Kog'Maw",
      'LeBlanc',
      'Lee Sin',
      'Leona',
      'Lillia',
      'Lissandra',
      'Lucian',
      'Lulu',
      'Lux',
      'Malphite',
      'Malzahar',
      'Maokai',
      'Master Yi',
      'Miss Fortune',
      'Mordekaiser',
      'Morgana',
      'Nami',
      'Nasus',
      'Nautilus',
      'Neeko',
      'Nidalee',
      'Nocturne',
      'Nunu',
      'Olaf',
      'Orianna',
      'Ornn',
      'Pantheon',
      'Poppy',
      'Pyke',
      'Qiyana',
      'Quinn',
      'Rakan',
      'Rammus',
      "Rek'Sai",
      'Renekton',
      'Rengar',
      'Riven',
      'Rumble',
      'Ryze',
      'Samira',
      'Sejuani',
      'Senna',
      'Seraphine',
      'Sett',
      'Shaco',
      'Shen',
      'Shyvana',
      'Singed',
      'Sion',
      'Sivir',
      'Skarner',
      'Sona',
      'Soraka',
      'Swain',
      'Sylas',
      'Syndra',
      'Tahm Kench',
      'Taliyah',
      'Talon',
      'Taric',
      'Teemo',
      'Thresh',
      'Tristana',
      'Trundle',
      'Tryndamere',
      'Twisted Fate',
      'Twitch',
      'Udyr',
      'Urgot',
      'Varus',
      'Vayne',
      'Veigar',
      "Vel'Koz",
      'Vi',
      'Viktor',
      'Vladimir',
      'Volibear',
      'Warwick',
      'Wukong',
      'Xayah',
      'Xerath',
      'Xin Zhao',
      'Yasuo',
      'Yone',
      'Yorick',
      'Yuumi',
      'Zac',
      'Zed',
      'Ziggs',
      'Zilean',
      'Zoe',
      'Zyra',
      'Akshan',
      "Bel'Veth",
      'Briar',
      'Nilah',
      'Renata',
      'Vex',
      'Viego',
      'Zeri',
    ];

    // Ki·ªÉm tra alt text c√≥ ph·∫£i champion name kh√¥ng
    if (
      alt &&
      validChampions.some(
        (champion) => champion.toLowerCase() === alt.toLowerCase().trim(),
      )
    ) {
      return true;
    }

    // Ki·ªÉm tra src c√≥ ch·ª©a champion name kh√¥ng
    if (src) {
      const srcLower = src.toLowerCase();
      if (
        validChampions.some((champion) =>
          srcLower.includes(
            champion.toLowerCase().replace(/\s+/g, '').replace(/'/g, ''),
          ),
        )
      ) {
        return true;
      }
    }

    // Ki·ªÉm tra title
    if (
      title &&
      validChampions.some(
        (champion) => champion.toLowerCase() === title.toLowerCase().trim(),
      )
    ) {
      return true;
    }

    return false;
  }

  /**
   * Ki·ªÉm tra xem t√™n champion c√≥ h·ª£p l·ªá kh√¥ng
   */
  private isValidChampionName(name: string): boolean {
    if (!name || name.length < 2 || name.length > 20) {
      return false;
    }

    // Ch·ªâ ch·∫•p nh·∫≠n ch·ªØ c√°i, kho·∫£ng tr·∫Øng v√† d·∫•u nh√°y ƒë∆°n
    return /^[A-Za-z\s']+$/.test(name.trim());
  }

  /**
   * Extract champion name from image attributes
   */
  private extractChampionNameFromImage(
    alt: string,
    src: string,
    title: string,
  ): string {
    // ∆Øu ti√™n alt text n·∫øu c√≥ v√† h·ª£p l·ªá
    if (alt && this.isValidChampionName(alt)) {
      return alt;
    }

    // Th·ª≠ title n·∫øu alt kh√¥ng c√≥
    if (title && this.isValidChampionName(title)) {
      return title;
    }

    // Cu·ªëi c√πng th·ª≠ extract t·ª´ src path
    if (src) {
      // Extract filename from path (v√≠ d·ª•: /images/caitlyn.jpg -> caitlyn)
      const matches = src.match(/([a-zA-Z']+)\.(?:jpg|jpeg|png|gif|webp)$/i);
      if (matches && matches[1]) {
        const nameFromSrc = matches[1];

        // Capitalize first letter ƒë·ªÉ consistent v·ªõi champion names
        const capitalizedName =
          nameFromSrc.charAt(0).toUpperCase() +
          nameFromSrc.slice(1).toLowerCase();

        if (this.isValidChampionName(capitalizedName)) {
          return capitalizedName;
        }
      }
    }

    return '';
  }

  /**
   * L·∫•y context c·ªßa h√¨nh ·∫£nh ƒë·ªÉ x√°c ƒë·ªãnh lo·∫°i counter
   */
  private getImageContext($: cheerio.CheerioAPI, $img: any): string {
    try {
      let context = '';
      let current = $img.parent();

      // Ki·ªÉm tra parent elements
      for (let i = 0; i < 3 && current.length; i++) {
        const text = current.text().toLowerCase();
        context += ' ' + text;
        current = current.parent();
      }

      // Ki·ªÉm tra siblings
      $img.siblings().each((_, sibling) => {
        context += ' ' + $(sibling).text().toLowerCase();
      });

      return context;
    } catch {
      return '';
    }
  }

  /**
   * T·∫°o champion counter data object v·ªõi imageUrl
   */
  private createChampionCounterData(championName: string, $img: any): any {
    const championData = {
      championId: championName.replace(/\s+/g, ''),
      championName: championName,
      winRate: 50, // Default win rate
      counterRating: 5,
      gameCount: 100, // Default game count
      goldDifferentialAt15: 0,
      difficulty: 'Medium',
      tips: this.generateTips(championName, 50),
      patch: '15.10',
      rank: 'Emerald+',
      imageUrl: '', // Th√™m link h√¨nh ·∫£nh
    };

    // Th√™m link h√¨nh ·∫£nh n·∫øu c√≥
    if ($img) {
      let imageUrl = $img.attr('src') || '';

      // X·ª≠ l√Ω relative URL
      if (imageUrl && !imageUrl.startsWith('http')) {
        if (imageUrl.startsWith('//')) {
          imageUrl = 'https:' + imageUrl;
        } else if (imageUrl.startsWith('/')) {
          imageUrl = 'https://kicdo.com' + imageUrl;
        }
      }

      championData.imageUrl = imageUrl;
    }

    return championData;
  }

  /**
   * Extract champion names t·ª´ text
   */
  private extractChampionNamesFromText(text: string): string[] {
    const championNames: string[] = [];

    // Danh s√°ch champion names ƒë·ªÉ match (ch·ªâ nh·ªØng t√™n th·ª±c s·ª±)
    const validChampions = [
      'Aatrox',
      'Ahri',
      'Akali',
      'Alistar',
      'Amumu',
      'Anivia',
      'Annie',
      'Ashe',
      'Azir',
      'Bard',
      'Blitzcrank',
      'Brand',
      'Braum',
      'Caitlyn',
      'Camille',
      'Cassiopeia',
      "Cho'Gath",
      'Corki',
      'Darius',
      'Diana',
      'Draven',
      'Ekko',
      'Elise',
      'Evelynn',
      'Ezreal',
      'Fiddlesticks',
      'Fiora',
      'Fizz',
      'Galio',
      'Gangplank',
      'Garen',
      'Gnar',
      'Gragas',
      'Graves',
      'Gwen',
      'Hecarim',
      'Heimerdinger',
      'Irelia',
      'Ivern',
      'Janna',
      'Jarvan',
      'Jax',
      'Jayce',
      'Jhin',
      'Jinx',
      "Kai'Sa",
      'Kalista',
      'Karma',
      'Karthus',
      'Kassadin',
      'Katarina',
      'Kayle',
      'Kayn',
      'Kennen',
      "Kha'Zix",
      'Kindred',
      'Kled',
      "Kog'Maw",
      'LeBlanc',
      'Lee Sin',
      'Leona',
      'Lillia',
      'Lissandra',
      'Lucian',
      'Lulu',
      'Lux',
      'Malphite',
      'Malzahar',
      'Maokai',
      'Master Yi',
      'Miss Fortune',
      'Mordekaiser',
      'Morgana',
      'Nami',
      'Nasus',
      'Nautilus',
      'Neeko',
      'Nidalee',
      'Nocturne',
      'Nunu',
      'Olaf',
      'Orianna',
      'Ornn',
      'Pantheon',
      'Poppy',
      'Pyke',
      'Qiyana',
      'Quinn',
      'Rakan',
      'Rammus',
      "Rek'Sai",
      'Renekton',
      'Rengar',
      'Riven',
      'Rumble',
      'Ryze',
      'Samira',
      'Sejuani',
      'Senna',
      'Seraphine',
      'Sett',
      'Shaco',
      'Shen',
      'Shyvana',
      'Singed',
      'Sion',
      'Sivir',
      'Skarner',
      'Sona',
      'Soraka',
      'Swain',
      'Sylas',
      'Syndra',
      'Tahm Kench',
      'Taliyah',
      'Talon',
      'Taric',
      'Teemo',
      'Thresh',
      'Tristana',
      'Trundle',
      'Tryndamere',
      'Twisted Fate',
      'Twitch',
      'Udyr',
      'Urgot',
      'Varus',
      'Vayne',
      'Veigar',
      "Vel'Koz",
      'Vi',
      'Viktor',
      'Vladimir',
      'Volibear',
      'Warwick',
      'Wukong',
      'Xayah',
      'Xerath',
      'Xin Zhao',
      'Yasuo',
      'Yone',
      'Yorick',
      'Yuumi',
      'Zac',
      'Zed',
      'Ziggs',
      'Zilean',
      'Zoe',
      'Zyra',
      'Akshan',
      "Bel'Veth",
      'Briar',
      'Nilah',
      'Renata',
      'Vex',
      'Viego',
      'Zeri',
    ];

    // T√¨m exact match cho champion names
    validChampions.forEach((champion) => {
      // T√¨m exact word match (kh√¥ng ph·∫£i substring)
      const regex = new RegExp(`\\b${champion.replace(/'/g, "\\'")}\\b`, 'i');
      if (regex.test(text)) {
        championNames.push(champion);
      }
    });

    return [...new Set(championNames)]; // Remove duplicates
  }

  /**
   * Extract formatted content from the HTML content
   */
  private extractFormattedContent($: cheerio.CheerioAPI): string {
    let formattedContent = '';

    try {
      // Ch·ªâ l·∫•y content sau c√°c th·∫ª h2, kh√¥ng l·∫•y to√†n b·ªô trang
      $('h2').each((_, h2Element) => {
        const $h2 = $(h2Element);
        const h2Text = $h2.text().trim();

        // B·ªè qua c√°c h2 kh√¥ng li√™n quan ƒë·∫øn counter
        if (
          !h2Text.includes('kh·∫Øc ch·∫ø') &&
          !h2Text.includes('Trang b·ªã') &&
          !h2Text.includes('ƒêi·ªÉm y·∫øu') &&
          !h2Text.includes('Chi·∫øn thu·∫≠t') &&
          !h2Text.includes('ƒë·ªëi ƒë·∫ßu') &&
          !h2Text.includes('m·∫πo')
        ) {
          return; // Skip this h2
        }

        // Th√™m h2 v√†o content
        formattedContent += `<h2>${h2Text}</h2>`;

        // L·∫•y t·∫•t c·∫£ content sau h2 cho ƒë·∫øn h2 ti·∫øp theo ho·∫∑c h·∫øt section
        let currentElement = $h2.next();

        while (currentElement.length && !currentElement.is('h2')) {
          const tagName = currentElement.prop('tagName')?.toLowerCase();

          // Ch·ªâ l·∫•y c√°c th·∫ª c√≥ n·ªôi dung h·ªØu √≠ch
          if (
            tagName === 'p' ||
            tagName === 'div' ||
            tagName === 'ul' ||
            tagName === 'ol' ||
            tagName === 'blockquote' ||
            tagName === 'h3' ||
            tagName === 'h4'
          ) {
            const elementText = currentElement.text().trim();

            // B·ªè qua c√°c element r·ªóng ho·∫∑c ch·ªâ ch·ª©a whitespace
            if (elementText.length > 10) {
              // B·ªè qua ads, scripts, v√† c√°c element kh√¥ng c·∫ßn thi·∫øt
              if (
                !currentElement.hasClass('adsbygoogle') &&
                !currentElement.hasClass('ad_sidebar') &&
                !currentElement.find('script').length &&
                !elementText.includes('Google tag') &&
                !elementText.includes('gtag')
              ) {
                formattedContent += currentElement.prop('outerHTML') || '';
              }
            }
          }

          currentElement = currentElement.next();
        }
      });

      // N·∫øu kh√¥ng t√¨m th·∫•y h2 n√†o, fallback ƒë·ªÉ t√¨m content trong main article
      if (!formattedContent) {
        const mainContent = $('main, article, .detail_con, .content').first();
        if (mainContent.length) {
          // T√¨m content sau h2 ƒë·∫ßu ti√™n trong main content
          const firstH2 = mainContent.find('h2').first();
          if (firstH2.length) {
            let currentElement = firstH2.next();
            formattedContent += `<h2>${firstH2.text()}</h2>`;

            while (currentElement.length && !currentElement.is('h2')) {
              const tagName = currentElement.prop('tagName')?.toLowerCase();

              if (
                tagName === 'p' ||
                tagName === 'div' ||
                tagName === 'ul' ||
                tagName === 'ol' ||
                tagName === 'blockquote'
              ) {
                const elementText = currentElement.text().trim();
                if (
                  elementText.length > 10 &&
                  !currentElement.hasClass('adsbygoogle') &&
                  !elementText.includes('Google tag')
                ) {
                  formattedContent += currentElement.prop('outerHTML') || '';
                }
              }

              currentElement = currentElement.next();
            }
          }
        }
      }

      // Clean up the content
      if (formattedContent) {
        // Remove scripts, styles, v√† ads
        formattedContent = formattedContent.replace(
          /<script[^>]*>[\s\S]*?<\/script>/gi,
          '',
        );
        formattedContent = formattedContent.replace(
          /<style[^>]*>[\s\S]*?<\/style>/gi,
          '',
        );
        formattedContent = formattedContent.replace(
          /<div[^>]*class="[^"]*adsbygoogle[^"]*"[^>]*>[\s\S]*?<\/div>/gi,
          '',
        );

        // Clean up extra whitespace
        formattedContent = formattedContent.replace(/\s+/g, ' ').trim();

        // Wrap in a container
        formattedContent = `<div class="champion-formatted-content">${formattedContent}</div>`;
      }
    } catch (error) {
      console.warn(
        'Warning: Error extracting formatted content:',
        error.message,
      );
    }

    return formattedContent;
  }

  private extractContentSections($: cheerio.CheerioAPI): any {
    const contentSections: any = {
      weaknessesContent: '',
      counterItemsContent: '',
      strategiesContent: '',
      additionalTipsContent: '',
    };

    try {
      // T√¨m v√† extract content t·ª´ c√°c h2 sections
      $('h2').each((_, h2Element) => {
        const $h2 = $(h2Element);
        const h2Text = $h2.text().trim().toLowerCase();

        let sectionContent = '';
        let currentElement = $h2.next();

        // L·∫•y content sau h2 cho ƒë·∫øn h2 ti·∫øp theo
        while (currentElement.length && !currentElement.is('h2')) {
          const tagName = currentElement.prop('tagName')?.toLowerCase();

          if (
            tagName === 'p' ||
            tagName === 'div' ||
            tagName === 'ul' ||
            tagName === 'ol' ||
            tagName === 'blockquote' ||
            tagName === 'h3'
          ) {
            const elementText = currentElement.text().trim();
            if (
              elementText.length > 10 &&
              !currentElement.hasClass('adsbygoogle') &&
              !elementText.includes('Google tag')
            ) {
              sectionContent += currentElement.prop('outerHTML') || '';
            }
          }

          currentElement = currentElement.next();
        }

        // Ph√¢n lo·∫°i content d·ª±a tr√™n h2 title
        if (h2Text.includes('ƒëi·ªÉm y·∫øu') || h2Text.includes('y·∫øu ƒëi·ªÉm')) {
          contentSections.weaknessesContent = this.cleanContent(sectionContent);
        } else if (h2Text.includes('trang b·ªã') || h2Text.includes('item')) {
          contentSections.counterItemsContent =
            this.cleanContent(sectionContent);
        } else if (
          h2Text.includes('chi·∫øn thu·∫≠t') ||
          h2Text.includes('c√°ch') ||
          h2Text.includes('ƒë·ªëi ƒë·∫ßu') ||
          h2Text.includes('kh·∫Øc ch·∫ø')
        ) {
          contentSections.strategiesContent = this.cleanContent(sectionContent);
        } else if (
          h2Text.includes('m·∫πo') ||
          h2Text.includes('l∆∞u √Ω') ||
          h2Text.includes('b·ªï sung')
        ) {
          contentSections.additionalTipsContent =
            this.cleanContent(sectionContent);
        }
      });

      // Fallback: t√¨m content d·ª±a tr√™n text patterns n·∫øu kh√¥ng c√≥ h2
      if (!contentSections.weaknessesContent) {
        $('p, div').each((_, element) => {
          const text = $(element).text().toLowerCase();
          if (
            (text.includes('ƒëi·ªÉm y·∫øu') || text.includes('y·∫øu ƒëi·ªÉm')) &&
            text.length > 50 &&
            text.length < 1000
          ) {
            contentSections.weaknessesContent = this.cleanContent(
              $(element).prop('outerHTML') || '',
            );
            return false;
          }
        });
      }

      if (!contentSections.counterItemsContent) {
        $('p, div').each((_, element) => {
          const text = $(element).text().toLowerCase();
          if (
            (text.includes('trang b·ªã') || text.includes('item')) &&
            text.length > 50 &&
            text.length < 1000
          ) {
            contentSections.counterItemsContent = this.cleanContent(
              $(element).prop('outerHTML') || '',
            );
            return false;
          }
        });
      }

      if (!contentSections.strategiesContent) {
        $('p, div').each((_, element) => {
          const text = $(element).text().toLowerCase();
          if (
            (text.includes('chi·∫øn thu·∫≠t') ||
              text.includes('c√°ch') ||
              text.includes('ƒë·ªëi ƒë·∫ßu') ||
              text.includes('kh·∫Øc ch·∫ø')) &&
            text.length > 50 &&
            text.length < 1000
          ) {
            contentSections.strategiesContent = this.cleanContent(
              $(element).prop('outerHTML') || '',
            );
            return false;
          }
        });
      }
    } catch (error) {
      console.warn(
        'Warning: Error extracting content sections:',
        error.message,
      );
    }

    return contentSections;
  }

  /**
   * Clean HTML content
   */
  private cleanContent(content: string): string {
    if (!content) return '';

    // Remove scripts and styles
    content = content.replace(/<script[^>]*>[\s\S]*?<\/script>/gi, '');
    content = content.replace(/<style[^>]*>[\s\S]*?<\/style>/gi, '');

    // Clean up extra whitespace
    content = content.replace(/\s+/g, ' ').trim();

    return content;
  }

  /**
   * Sleep utility for retry delays
   */
  private sleep(ms: number): Promise<void> {
    return new Promise((resolve) => setTimeout(resolve, ms));
  }

  /**
   * Batch crawl multiple champions and roles
   */
  async batchCrawlCounters(
    champions: Array<{ name: string; roles: string[] }>,
    patch?: string,
    rank?: string,
  ): Promise<void> {
    console.log(`üöÄ Starting batch crawl for ${champions.length} champions...`);

    for (const champion of champions) {
      console.log(`\nüìä Crawling ${champion.name}...`);

      for (const role of champion.roles) {
        try {
          console.log(`  - ${role} role...`);
          await this.crawlCounterData(champion.name, role, patch, rank);

          // Delay between requests to be respectful
          await this.sleep(2000);
        } catch (error) {
          console.error(
            `‚ùå Failed to crawl ${champion.name} ${role}:`,
            error.message,
          );
          continue;
        }
      }
    }

    console.log('\n‚úÖ Batch crawl completed!');
  }

  /**
   * Extract additional structured data
   */
  private extractAdditionalData($: cheerio.CheerioAPI): any {
    const additionalData: any = {};

    try {
      // Extract item build recommendations
      const coreItems = [];
      $('.core-items .item, .recommended-items .item').each((_, element) => {
        const itemName = $(element).attr('alt') || $(element).text().trim();
        if (itemName) coreItems.push(itemName);
      });
      if (coreItems.length > 0) {
        additionalData.itemBuildRecommendations = { core: coreItems };
      }

      // Extract rune recommendations
      const primaryRune = $('.primary-rune, .keystone').first().text().trim();
      if (primaryRune) {
        additionalData.runeRecommendations = { primary: primaryRune };
      }

      // Extract play style recommendations
      const playStyle = $('.playstyle, .strategy, .tips').first().text().trim();
      if (playStyle) {
        additionalData.playStyle = playStyle;
      }
    } catch (error) {
      console.warn('Warning: Error extracting additional data:', error.message);
    }

    return additionalData;
  }

  /**
   * Calculate counter rating based on win rate and game count
   */
  private calculateCounterRating(winRate: number, gameCount: number): number {
    if (gameCount < 50) return 5; // Not enough data

    if (winRate >= 60) return 9 + (winRate - 60) * 0.1;
    if (winRate >= 55) return 7 + (winRate - 55) * 0.4;
    if (winRate >= 50) return 5 + (winRate - 50) * 0.4;
    if (winRate >= 45) return 3 + (winRate - 45) * 0.4;
    if (winRate >= 40) return 1 + (winRate - 40) * 0.4;

    return 0.5;
  }

  /**
   * Calculate difficulty based on win rate and counter rating
   */
  private calculateDifficulty(winRate: number, counterRating: number): string {
    if (counterRating >= 8 || winRate >= 58) return 'Hard';
    if (counterRating >= 6 || winRate >= 53) return 'Medium';
    return 'Easy';
  }

  /**
   * Generate tips based on champion matchup
   */
  private generateTips(enemyChampionName: string, winRate: number): string {
    if (winRate > 55) {
      return `${enemyChampionName} has significant advantages in this matchup. Play defensively and look for team fight opportunities.`;
    } else if (winRate < 45) {
      return `You have good chances against ${enemyChampionName}. Look for aggressive plays and early advantages.`;
    } else {
      return `Fairly balanced matchup against ${enemyChampionName}. Focus on macro play and positioning.`;
    }
  }

  /**
   * Analyze and reclassify champions based on context analysis
   */
  private analyzeAndReclassifyChampions(
    $: cheerio.CheerioAPI,
    counterData: any,
    targetChampionName?: string,
  ): void {
    console.log('üîç Analyzing and reclassifying champions...');

    if (!targetChampionName) {
      targetChampionName = 'unknown';
    }

    console.log(`üéØ Target champion detected: ${targetChampionName}`);

    // T√¨m t·∫•t c·∫£ h√¨nh ·∫£nh champion
    $('img').each((_, imgElement) => {
      const $img = $(imgElement);
      const alt = $img.attr('alt') || '';
      const src = $img.attr('src') || '';
      const title = $img.attr('title') || '';

      // Ki·ªÉm tra xem c√≥ ph·∫£i h√¨nh champion kh√¥ng
      if (this.isChampionImage(alt, src, title)) {
        const championName = this.extractChampionNameFromImage(alt, src, title);
        if (championName && championName.length > 2) {
          // Ki·ªÉm tra xem ƒë√£ c√≥ champion n√†y ch∆∞a
          const existsInAny =
            counterData.weakAgainst.find(
              (c) => c.championName === championName,
            ) ||
            counterData.strongAgainst.find(
              (c) => c.championName === championName,
            ) ||
            counterData.bestLaneCounters.find(
              (c) => c.championName === championName,
            ) ||
            counterData.worstLaneCounters.find(
              (c) => c.championName === championName,
            );

          if (!existsInAny) {
            const championData = this.createChampionCounterData(
              championName,
              $img,
            );

            // Ph√¢n t√≠ch context chi ti·∫øt ƒë·ªÉ x√°c ƒë·ªãnh lo·∫°i counter
            const context = this.getImageContext($, $img);
            const parentText = $img
              .closest('div, section, article')
              .text()
              .toLowerCase();
            const nearbyText = $img.parent().text().toLowerCase();

            console.log(`üîç Analyzing ${championName}:`);
            console.log(`   Context: "${context.substring(0, 100)}..."`);
            console.log(`   Parent text: "${parentText.substring(0, 100)}..."`);
            console.log(`   Nearby text: "${nearbyText.substring(0, 100)}..."`);

            // Logic ph√¢n lo·∫°i d·ª±a tr√™n context v·ªõi dynamic champion name
            const targetChampLower = targetChampionName.toLowerCase();

            // Ki·ªÉm tra tr√πng l·∫∑p tr∆∞·ªõc khi ph√¢n lo·∫°i
            const isWeakAgainstCandidate =
              context.includes(`kh·∫Øc ch·∫ø ${targetChampLower}`) ||
              context.includes(`counter ${targetChampLower}`) ||
              parentText.includes(`t∆∞·ªõng kh·∫Øc ch·∫ø ${targetChampLower}`) ||
              nearbyText.includes(`kh·∫Øc ch·∫ø ${targetChampLower}`) ||
              context.includes('t∆∞·ªõng kh·∫Øc ch·∫ø') ||
              parentText.includes('counter') ||
              nearbyText.includes('kh·∫Øc ch·∫ø');

            const isStrongAgainstCandidate =
              context.includes(`${targetChampLower} kh·∫Øc ch·∫ø`) ||
              context.includes(`${targetChampLower} counter`) ||
              parentText.includes(`${targetChampLower} kh·∫Øc ch·∫ø`) ||
              nearbyText.includes(`${targetChampLower} kh·∫Øc ch·∫ø`) ||
              context.includes('y·∫øu h∆°n') ||
              context.includes('weak') ||
              context.includes('t∆∞·ªõng y·∫øu');

            const isBestLaneCountersCandidate =
              context.includes('t·ª∑ l·ªá th·∫Øng cao') ||
              context.includes('th·∫Øng cao') ||
              context.includes('c√≥ l·ª£i th·∫ø') ||
              context.includes('win rate') ||
              parentText.includes('t·ª∑ l·ªá th·∫Øng') ||
              nearbyText.includes('th·ªëng k√™');

            // ∆Øu ti√™n strongAgainst v√† bestLaneCounters tr∆∞·ªõc
            if (isStrongAgainstCandidate) {
              // Ki·ªÉm tra tr√πng l·∫∑p ch·ªâ trong strongAgainst
              const existsInStrongAgainst = counterData.strongAgainst.find(
                (c) => c.championName === championName,
              );
              if (!existsInStrongAgainst) {
                counterData.strongAgainst.push(championData);
                console.log(`   ‚úÖ Added to strongAgainst: ${championName}`);
              }
            } else if (isBestLaneCountersCandidate) {
              // Ki·ªÉm tra tr√πng l·∫∑p ch·ªâ trong bestLaneCounters
              const existsInBestLane = counterData.bestLaneCounters.find(
                (c) => c.championName === championName,
              );
              if (!existsInBestLane) {
                counterData.bestLaneCounters.push(championData);
                console.log(`   ‚úÖ Added to bestLaneCounters: ${championName}`);
              }
            } else if (isWeakAgainstCandidate) {
              // Ki·ªÉm tra tr√πng l·∫∑p ch·ªâ trong weakAgainst
              const existsInWeakAgainst = counterData.weakAgainst.find(
                (c) => c.championName === championName,
              );
              if (!existsInWeakAgainst) {
                counterData.weakAgainst.push(championData);
                console.log(`   ‚úÖ Added to weakAgainst: ${championName}`);
              }
            } else {
              // Ph√¢n t√≠ch th√™m d·ª±a tr√™n v·ªã tr√≠ trong trang
              const allImages = $('img').toArray();
              const imgIndex = allImages.indexOf(imgElement);
              const totalImages = allImages.length;

              if (imgIndex < totalImages * 0.3) {
                // Ki·ªÉm tra tr√πng l·∫∑p ch·ªâ trong weakAgainst
                const existsInWeakAgainst = counterData.weakAgainst.find(
                  (c) => c.championName === championName,
                );
                if (!existsInWeakAgainst) {
                  counterData.weakAgainst.push(championData);
                  console.log(
                    `   ‚úÖ Added to weakAgainst (position-based): ${championName}`,
                  );
                }
              } else if (imgIndex > totalImages * 0.7) {
                // Ki·ªÉm tra tr√πng l·∫∑p ch·ªâ trong strongAgainst
                const existsInStrongAgainst = counterData.strongAgainst.find(
                  (c) => c.championName === championName,
                );
                if (!existsInStrongAgainst) {
                  counterData.strongAgainst.push(championData);
                  console.log(
                    `   ‚úÖ Added to strongAgainst (position-based): ${championName}`,
                  );
                }
              } else {
                // Ki·ªÉm tra tr√πng l·∫∑p ch·ªâ trong bestLaneCounters
                const existsInBestLane = counterData.bestLaneCounters.find(
                  (c) => c.championName === championName,
                );
                if (!existsInBestLane) {
                  counterData.bestLaneCounters.push(championData);
                  console.log(
                    `   ‚úÖ Added to bestLaneCounters (position-based): ${championName}`,
                  );
                }
              }
            }
          }
        }
      }
    });

    console.log(`üìä Final distribution:`);
    console.log(
      `   - Weak Against: ${counterData.weakAgainst.length} champions`,
    );
    console.log(
      `   - Strong Against: ${counterData.strongAgainst.length} champions`,
    );
    console.log(
      `   - Best Lane Counters: ${counterData.bestLaneCounters.length} champions`,
    );
    console.log(
      `   - Worst Lane Counters: ${counterData.worstLaneCounters.length} champions`,
    );
  }
}
