import { NestFactory } from '@nestjs/core';
import { AppModule } from '../../app.module';
import { Model } from 'mongoose';
import { ChampionDocument } from '../schemas/champion.schema';

class ForceFixMapping {
  constructor(private championModel: Model<ChampionDocument>) {}

  // COMPLETE mapping t·ª´ Vietnamese sang English
  private viToEnMapping = {
    // ===== RUNES =====
    '√Åp ƒê·∫£o': 'Domination',
    'Ch√≠nh X√°c': 'Precision',
    'Ph√°p Thu·∫≠t': 'Sorcery',
    'Quy·∫øt T√¢m': 'Resolve',
    'C·∫£m H·ª©ng': 'Inspiration',

    // Domination Runes
    'S·ªëc ƒêi·ªán': 'Electrocute',
    'K·∫ª SƒÉn M·ªìi': 'Predator',
    'Thu Ho·∫°ch B√≥ng T·ªëi': 'Dark Harvest',
    'M∆∞a Ki·∫øm': 'Hail of Blades',
    'ƒê√≤n H√®n': 'Cheap Shot',
    'V·ªã M√°u': 'Taste of Blood',
    'Va Ch·∫°m ƒê·ªôt Ng·ªôt': 'Sudden Impact',
    'M·∫Øt Zombie': 'Zombie Ward',
    'Ma Poro': 'Ghost Poro',
    'B·ªô S∆∞u T·∫≠p Nh√£n C·∫ßu': 'Eyeball Collection',
    'K√Ω ·ª®c Kinh Ho√†ng': 'Eyeball Collection',
    'Th·ª£ SƒÉn Kho B√°u': 'Treasure Hunter',
    'Th·ª£ SƒÉn Kh√¥n Ngoan': 'Ingenious Hunter',
    'Th·ª£ SƒÉn Ki√™n C∆∞·ªùng': 'Relentless Hunter',
    'Th·ª£ SƒÉn T·ªëi Th∆∞·ª£ng': 'Ultimate Hunter',

    // Sorcery Runes
    'Tri·ªáu H·ªìi Aery': 'Summon Aery',
    'Sao Ch·ªïi B√≠ Thu·∫≠t': 'Arcane Comet',
    'Lao V·ªçt': 'Phase Rush',
    'Qu·∫£ C·∫ßu V√¥ Hi·ªáu': 'Nullifying Orb',
    'D·∫£i BƒÉng NƒÉng L∆∞·ª£ng': 'Manaflow Band',
    '√Åo Cho√†ng M√¢y': 'Nimbus Cloak',
    'Si√™u Vi·ªát': 'Transcendence',
    'Nhanh Nh·∫πn': 'Celerity',
    'T·∫≠p Trung Tuy·ªát ƒê·ªëi': 'Absolute Focus',
    'Thi√™u ƒê·ªët': 'Scorch',
    'ƒêi Tr√™n N∆∞·ªõc': 'Waterwalking',
    'T·ª• T·∫≠p B√£o T·ªë': 'Gathering Storm',

    // Precision Runes
    'ƒê√¥i Ch√¢n Nhanh': 'Fleet Footwork',
    'Chi·∫øn Th·∫Øng': 'Triumph',
    'Huy·ªÅn Tho·∫°i: D√≤ng M√°u': 'Legend: Bloodline',
    'Huy·ªÅn Tho·∫°i: ƒê·ªô B·ªÅn': 'Legend: Tenacity',
    'Huy·ªÅn Tho·∫°i: T·ªëc ƒê·ªô ƒê√°nh': 'Legend: Alacrity',
    'ƒê√≤n Cu·ªëi': 'Coup de Grace',
    'C·∫Øt H·∫°': 'Cut Down',
    'Kh√¥ng Khoan Nh∆∞·ª£ng': 'Last Stand',

    // Resolve Runes
    'Rung Ch·∫•n': 'Aftershock',
    'B·∫£o V·ªá': 'Guardian',
    'X∆∞∆°ng C·ªët': 'Bone Plating',
    'Kho·∫£ng C√°ch': 'Demolish',
    'S·ªëng S√≥t': 'Revitalize',
    'TƒÉng Tr∆∞·ªüng': 'Overgrowth',
    '√ù Ch√≠ B·∫•t Khu·∫•t': 'Unflinching',

    // Inspiration Runes
    'Gi√†y Ma Thu·∫≠t': 'Magical Footwear',
    'Th·ªã Tr∆∞·ªùng T∆∞∆°ng Lai': "Future's Market",
    'T·ªëc ƒê·ªô Ti·∫øp C·∫≠n': 'Approach Velocity',
    'Tia S√©t V≈© Tr·ª•': 'Cosmic Insight',
    'ƒê·ªìng H·ªì Th·ªùi Gian': 'Time Warp Tonic',

    // Stat Shards
    'T·ªëc ƒê·ªô ƒê√°nh': 'Attack Speed',
    'S·ª©c M·∫°nh Th√≠ch ·ª®ng': 'Adaptive Force',
    'Gi·∫£m H·ªìi Chi√™u': 'Ability Haste',
    Gi√°p: 'Armor',
    'Kh√°ng Ph√©p': 'Magic Resist',
    'M√°u TƒÉng Ti·∫øn': 'Health',
    M√°u: 'Health',

    // ===== ITEMS =====
    'Nh·∫´n Doran': "Doran's Ring",
    'Khi√™n Doran': "Doran's Shield",
    'Ki·∫øm Doran': "Doran's Blade",
    'B√¨nh M√°u': 'Health Potion',
    Gi√†y: 'Boots',
    'T√¥m Kh√¥': 'Cull',
    'Th·∫ßn Kh√≠': 'Relic Shield',
    'L∆∞·ª°i Th√©p': 'Steel Shoulderguards',
    'Chi·∫øc M√≥ng': 'Spectral Sickle',

    // Boots
    'Gi√†y Ph√°p S∆∞': "Sorcerer's Shoes",
    'Gi√†y Khai S√°ng Ionia': 'Ionian Boots of Lucidity',
    'Gi√†y Th·ªßy Ng√¢n': "Mercury's Treads",
    'Gi√†y Th√©p TƒÉng C∆∞·ªùng': 'Plated Steelcaps',
    'Gi√†y Nhanh': 'Boots of Swiftness',
    'Gi√†y Berserker': "Berserker's Greaves",

    // Mythic & Legendary Items
    'M·∫∑t N·∫° ƒê·ªça ƒê√†y Liandry': "Liandry's Anguish",
    'B√£o T·ªë Luden': "Luden's Tempest",
    'H·ªèa Khu·∫©n': 'Everfrost',
    'Ng·ªçn L·ª≠a H·∫Øc H√≥a': 'Shadowflame',
    'M≈© Ph√π Th·ªßy Rabadon': "Rabadon's Deathcap",
    'ƒê·ªìng H·ªì C√°t Zhonya': "Zhonya's Hourglass",
    'Tr∆∞·ª£ng H∆∞ V√¥': 'Void Staff',
    'S√°ch Chi√™u H·ªìn Mejai': "Mejai's Soulstealer",
    'ƒê·ªông C∆° V≈© Tr·ª•': 'Cosmic Drive',
    'Quy·ªÅn Tr∆∞·ª£ng B√£o T·ªë': 'Stormsurge',
    'Quy·ªÅn Tr∆∞·ª£ng √Åc Th·∫ßn': 'Malignance',
    'Tr∆∞·ª£ng Tr∆∞·ªùng Sinh': 'Rod of Ages',
    'K√≠nh Nh·∫Øm Ma Ph√°p': 'Horizon Focus',
    'S√°ch C·∫•m Morellonomicon': 'Morellonomicon',
    'KhƒÉn Cho√†ng Banshee': "Banshee's Veil",
    'Ki·∫øm Tai ∆Ø∆°ng': 'Lich Bane',
    'RƒÉng Nanh Nashor': "Nashor's Tooth",
    'ƒê·ªông C∆° T√™n L·ª≠a Hextech': 'Hextech Rocketbelt',
    'Hoa N·ªü ƒê·ªãa Ng·ª•c': 'Cryptbloom',
    'ƒê√° Canh G√°c': 'Vigilant Wardstone',
    'Ph√π Ph√©p Mikael': "Mikael's Blessing",
    'C·ª©u Chu·ªôc': 'Redemption',
    'Tr∆∞·ª£ng N∆∞·ªõc Ch·∫£y': 'Staff of Flowing Water',
    'ƒê√° M·∫∑t TrƒÉng T√°i Sinh': 'Moonstone Renewer',
    'L·ªánh Ho√†ng Gia': 'Imperial Mandate',
    'D√¢y Chuy·ªÅn Ch·ªØ Th·∫≠p': 'Chemtech Putrifier',
    'M√≥ng Vu·ªët Sterak': "Sterak's Gage",
    'Gi√°p Th√©p Gai': 'Thornmail',
    'M·∫∑t N·∫° Th·∫ßn Linh': 'Spirit Visage',
    'Gi√°p Randuin': "Randuin's Omen",
    'ƒê√¥i C√°nh Thi√™n Th·∫ßn': 'Guardian Angel',
    'Ki·∫øm V√¥ C·ª±c': 'Infinity Edge',
  };

  /**
   * Force convert EN name from VI name using mapping
   */
  private forceConvertEn(obj: any) {
    if (typeof obj === 'object' && obj?.vi) {
      const viName = obj.vi;
      const enName = this.viToEnMapping[viName] || viName;
      obj.en = enName; // Force update EN
      return true; // Indicates change was made
    }
    return false;
  }

  /**
   * Force fix recommended runes
   */
  private forceFixRunes(runes: any[]) {
    if (!runes || runes.length === 0) return runes;

    let hasChanges = false;

    runes.forEach((runeGroup) => {
      // Fix primary tree
      if (runeGroup.primaryTree?.name) {
        if (this.forceConvertEn(runeGroup.primaryTree.name)) hasChanges = true;

        if (runeGroup.primaryTree.runes) {
          runeGroup.primaryTree.runes.forEach((rune) => {
            if (this.forceConvertEn(rune)) hasChanges = true;
          });
        }
      }

      // Fix secondary tree
      if (runeGroup.secondaryTree?.name) {
        if (this.forceConvertEn(runeGroup.secondaryTree.name))
          hasChanges = true;

        if (runeGroup.secondaryTree.runes) {
          runeGroup.secondaryTree.runes.forEach((rune) => {
            if (this.forceConvertEn(rune)) hasChanges = true;
          });
        }
      }

      // Fix stat shards
      if (runeGroup.statShards) {
        runeGroup.statShards.forEach((shard) => {
          if (this.forceConvertEn(shard)) hasChanges = true;
        });
      }
    });

    return hasChanges ? runes : null;
  }

  /**
   * Force fix recommended items
   */
  private forceFixItems(items: any[]) {
    if (!items || items.length === 0) return items;

    let hasChanges = false;

    items.forEach((itemGroup) => {
      // Fix starting items
      if (itemGroup.startingItems) {
        itemGroup.startingItems.forEach((startGroup) => {
          if (startGroup.items) {
            startGroup.items.forEach((item) => {
              if (this.forceConvertEn(item)) hasChanges = true;
            });
          }
        });
      }

      // Fix boots
      if (itemGroup.boots) {
        itemGroup.boots.forEach((boot) => {
          if (boot.name && this.forceConvertEn(boot.name)) hasChanges = true;
        });
      }

      // Fix core builds
      if (itemGroup.coreBuilds) {
        itemGroup.coreBuilds.forEach((build) => {
          if (build.items) {
            build.items.forEach((item) => {
              if (this.forceConvertEn(item)) hasChanges = true;
            });
          }
        });
      }

      // Fix situational items
      if (itemGroup.situational) {
        Object.keys(itemGroup.situational).forEach((key) => {
          if (Array.isArray(itemGroup.situational[key])) {
            itemGroup.situational[key].forEach((item) => {
              if (item.name && this.forceConvertEn(item.name))
                hasChanges = true;
            });
          }
        });
      }
    });

    return hasChanges ? items : null;
  }

  /**
   * Force fix all champions
   */
  async forceFixAllChampions() {
    console.log('üîß FORCE Fixing EN Names from VI Names');
    console.log('======================================');

    const champions = await this.championModel.find().lean();
    let processedCount = 0;
    let updatedCount = 0;
    let missingsCount = 0;

    for (const champion of champions) {
      try {
        console.log(`üîÑ Processing ${champion.id}...`);
        processedCount++;

        const updateData: any = {};
        let needsUpdate = false;

        // Force fix recommended runes
        if (champion.recommendedRunes && champion.recommendedRunes.length > 0) {
          const fixedRunes = this.forceFixRunes(champion.recommendedRunes);
          if (fixedRunes) {
            updateData.recommendedRunes = fixedRunes;
            needsUpdate = true;
            console.log(`‚úÖ Force fixed runes for ${champion.id}`);
          }
        }

        // Force fix recommended items
        if (champion.recommendedItems && champion.recommendedItems.length > 0) {
          const fixedItems = this.forceFixItems(champion.recommendedItems);
          if (fixedItems) {
            updateData.recommendedItems = fixedItems;
            needsUpdate = true;
            console.log(`‚úÖ Force fixed items for ${champion.id}`);
          }
        }

        // Update in database
        if (needsUpdate) {
          await this.championModel.updateOne(
            { _id: champion._id },
            { $set: updateData },
          );
          updatedCount++;
          console.log(`‚úÖ Updated ${champion.id}`);
        } else {
          console.log(`‚è≠Ô∏è  No changes needed for ${champion.id}`);
        }
      } catch (error) {
        console.error(`‚ùå Error processing ${champion.id}:`, error.message);
      }
    }

    console.log(`\nüìä Force Fix Summary:`);
    console.log(`‚úÖ Processed: ${processedCount}`);
    console.log(`‚úÖ Updated: ${updatedCount}`);
    console.log(`‚ö†Ô∏è  Missing mappings: ${missingsCount}`);

    return { processedCount, updatedCount, missingsCount };
  }
}

async function runForceFix() {
  const app = await NestFactory.createApplicationContext(AppModule);

  try {
    const championModel = app.get('ChampionModel');
    const fixer = new ForceFixMapping(championModel);

    await fixer.forceFixAllChampions();

    console.log('\nüéâ Force mapping fix completed!');
    console.log('\nüîó Test with: npm run test:complete-migration');
  } catch (error) {
    console.error('‚ùå Force fix failed:', error.message);
    console.error(error.stack);
  } finally {
    await app.close();
  }
}

runForceFix().catch(console.error);
